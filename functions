
#! /bin/bash

# ------------------------------------------------------------------------------
# Name    : functions
# About   : Extended function for dotfiles
# Author  : Andrew Kuttor
# Contact : andrew.kuttor@gmail.com
# ------------------------------------------------------------------------------

mcd(){ mkdir -p $1 && cd $1; }                            # make/cd to folder
rsed(){ find . -type f -exec sed "$@" {} \+ ;}            # recursive sed
dug(){ dig +nocmd $1 any +multiline +noall +answer ;}     # better dig
backup(){ cp -p $@{,.backup$(date '+%Y%m%dx')} ;}         # easy backup
httpHeaders() { curl -I -L $@ ;}                          # get HTTP headers
ak1(){ tree -L 1 -Ccfhau --du --dirsfirst $@ ;}           # better ls
ak2(){ tree -L 2 -Ccfhau --du --dirsfirst $@ ;}           # better ls
ak3(){ tree -L 3 -Ccfhau --du --dirsfirst $@ ;}           # better ls
trash() { mv $@ "$HOME/.Trash" ;}                         # easy backup
zed(){ sed -i -e "s/$1/$2/g" $3 ;}                        # easy send

# Multi-format unarchiver
extract(){
    if [ -f $1 ]; then 
        case $1 in
          *.tar.bz2)   tar xjf $1     ;;
          *.tar.gz)    tar xzf $1     ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar e $1     ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xf $1      ;;
          *.tbz2)      tar xjf $1     ;;
          *.tgz)       tar xzf $1     ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "$1"      ;;
      esac
  else
      echo "Incompatible archive: $1"
  fi
}

# FASD directory warping aliased to j
j() {
    local dir="$(fasd -ld "$@")"
    [[ -d "$dir" ]] && pushd "$dir"
}
complete -d j

# FASD directory warping art ludacris speed
jj() {
    local dir
    dir=$(fasd -Rdl |\
        sed "s:$HOME:~:" |\
        fzf --no-sort +m -q "$*" |\
        sed "s:~:$HOME:")\
    && pushd "$dir"
}
complete -d jj

# Les, it's like less -- but in technicolor
les() {
    ftype=$(pygmentize -N "$1")
    pygmentize -l "$ftype"\
      -f terminal "$1" |\
        less -R
}

v() {
    local file
    if [[ -e "$1" ]]; then
        les "$1"
    else
        file=$(fzf --query="$1"\
          --select-1 --exit-0)
        [ -n "$file" ] && les "$file"
    fi
}

complete -f les
complete -f v

# A dynamic duo recent directory navigator
t() {
  fasdlist=$( fasd -d -l -r $1 | \
    fzf --query="$1 " --select-1 --exit-0 --height=25% --reverse --tac --no-sort --cycle) &&
    cd "$fasdlist"
}


# FZF/FASD duo drop down fuzzy finding document opener
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --reverse --height=40
% --tac --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}


# Brew
bs() {
  local inst=$(brew search | fzf --reverse -m)

  if [[ $inst ]]; then
    for prog in $(echo $inst);
    do brew install $prog; done;
  fi
}

bu() {
  local upd=$(brew leaves | fzf --reverse -m)

  if [[ $upd ]]; then
    for prog in $(echo $upd);
    do brew upgrade $prog; done;
  fi
}

bd() {
  local uninst=$(brew leaves | fzf --reverse -m)

  if [[ $uninst ]]; then
    for prog in $(echo $uninst);
    do brew uninstall $prog; done;
  fi
}

# fshow - git commit browser
gshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}
