# Test if arguments are empty
# [  -z "$somevarname" ] && echo "Empty: Yes" || echo "Empty: No"

# List all regions
alias list_all_aws_regions='aws ec2 describe-regions --output text | cut -f3'

# Outputs users ARN
list_iam_arns() {
  aws iam list-users --output json --profile $1 | jq -r .Users[].Arn
}

# Sets default AWS profile
export AWS_DEFAULT_PROFILE=andrewkuttor


# List mfa device serials for account
list_mfa_device_serials(){
  [[-z "$1"]] && echo "IAM User name empty; return"
  iam list-virtual-mfa-devices --query 'VirtualMFADevices[*].SerialNumber[]'
  --profiles $2 | grep $1
}


# Retrieves latest Intuit approved AMI
latest_ami() {
  if [ -z "$1" ]; then
    echo "Please specify the desired AWS region: ex us-west-2"
    echo "Usage: latest_ami us-west-2"
    return 1
  fi

  OSVERSION="rhel7.2"
  AMI_RAW=$(curl -s "https://hosting.intuit.com/amiquery/amis?tag=osVersion:$OSVERSION&tag=virtualization:hvm&status=available&tag=relatedTechnology:linux&region=$1") 2>/dev/null
  AMI_ID=$(echo "$AMI_RAW" | jq -r 'max_by(.tags.creationDate).id')
  echo $REGION": "$AMI_ID
}


# CF Template validation
aws_cf_validate() {
  file_path=$1
  aws cloudformation validate-template \
    --template-body file://`pwd`/$file_path
}

cliam() {
  if [ $1 == '-h' ]; then
    printf '%s\n' "\
		  Usage: \
          Switch profiles: $name -s [profile name] \
          List all profiles: $name -l
    "
    exit 1
  fi
}


# List IAM profiles, currently hardcoded default credential file
cliamlist() {
  cred_file=${AWS_SHARED_CREDENTIALS_FILE};
  [ -z $cred_file ] && cred_file=~/.aws/credentials
  profiles=($(awk '/\[/{ gsub(/\[|\]/,"") ; print $NF }' $cred_file))
  printf '%s\n' "total ${#profiles[@]}"
  # printf '%s\n' "${profiles[@]}"

  for profile in "${profiles[@]}"
  do
    if [ "$profile" == "${AWS_DEFAULT_PROFILE}" ]
    then
      echo -e "\e[92m"$profile"\033[0m"
    else
      printf '%s\n' $profile
    fi
  done
}

# Displays current IAM profile
cliamuser() {
  aws configure list | awk '{ printf "%-20s %-40s\n", $1, $2 }'
}

# Checks if IAM profile exists and if so switches to it
cliamswitch() {
  EXISTS="$(aws configure get aws_access_key_id --profile $1)"
  if [ $EXISTS ]
  then
    printf '%s\n' "Found profile: $3"
  else
    printf '%s\n' "Profile not found, please try again"
    exit 1
  fi

  printf '%s\n' "Switching profile to "$1
  export AWS_DEFAULT_PROFILE=$1
  echo $AWS_DEFAULT_PROFILE
}

