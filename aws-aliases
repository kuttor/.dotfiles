[toplevel]

# Shorteners
edi = ec2 describe-instances

# List current defaul IAM CLI user
whoami = configure list


# Describe SG rules by group ID
sg-rules =
  ec2 describe-security-groups \
    --group-id $1              \
    --output text              \
    --query "SecurityGroups[].IpPermissions[].[
              FromPort, ToPort, IpProtocol,
              join(',',IpRanges[].CidrIp)]"


# Converts string to alias format via jmespath
tostring =
  !f() { jp -f "${1}" 'to_string(@)' }; f


# Converts string to alias format via JQ
tostring-with-jq =
  !f() { cat "${1}" | jq 'tostring' }; f


# Lists  group ID via group name
get-group-id =
  ec2 describe-security-groups                      \
              --filters Name=group-name,Values=${1} \
              --query SecurityGroups[0].GroupId     \
              --output text                         \


# List all SG port ranges open to 0.0.0.0/0
public-ports = 
  ec2 describe-security-groups         \
    --filters Name=ip-permission.cidr, \
              Values=0.0.0.0/0         \
    --query 'SecurityGroups[].{
              GroupName:GroupName,
              GroupId:GroupId,
              PortRanges:
                IpPermissions[?contains(IpRanges[].
                  CidrIp, `0.0.0.0/0`)].[
              join(`:`, [IpProtocol,
                join(`-`, [to_string(FromPort),
                to_string(ToPort)])])][]}'


# List or set your region
# Set usage: aws region <region>
region =
  !f() {
    [ $1 ] && aws configure set region "$1" \
           || aws configure get region
  }; f


# Describe all VA's per account 
describe-vas =           \
  ec2 describe-instances \
    --output table       \
    --filter Name=tag:Component,Values=Appliance
    --query 'Reservations[].Instances[].[
             Tags[?Key==`Name`].Value | [0],
             Tags[?Key==`Project`].Value | [0],
             InstanceId, PrivateIpAddress, State.Name]'


# Show current public IP
myip =
  !dig +short myip.opendns.com @resolver1.opendns.com

# Switches to a target IAM CLI user
profile =
  !f() {
    check="$(aws configure get aws_access_key_id --profile $1)"
    [ $check ] && printf 'Switching profile to $1: '\
                  export AWS_DEFAULT_PROFILE=$1
  };

# Describe all VA's per account
# Columns (Name, Project-Serial, Instance ID, Private IP, Status)
describe-vas2 =           \
  ec2 describe-instances \
    --output table       \
    --filter Name=tag:Component,Values=Appliance
    --query 'Reservations[].Instances[].{
             Name: Tags[?Key==`Name`].Value | [0],
             Project: Tags[?Key==`Project`].Value | [0],
             ID: InstanceId, 
             PrivateIP: PrivateIpAddress,
             Status: State.Name}'

