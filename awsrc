#!/bin/sh
# Test if arguments are empty
# [  -z "$somevarname" ] && echo "Empty: Yes" || echo "Empty: No"

# List all regions
alias list_all_aws_regions='aws ec2 describe-regions --output text | cut -f3'

# Outputs users ARN
list_iam_arns(){
  aws iam list-users --output json --profile $1 | jq -r .Users[].Arn
}

# List mfa device serials for account
list_mfa_device_serials(){
  [[-z "$1"]] && echo "IAM User name empty; return"
  iam list-virtual-mfa-devices --query 'VirtualMFADevices[*].SerialNumber[]'
  --profiles $2 | grep $1
}

# Outputs the credential and config file
alias awscreds='dog ~/.aws/config'
alias awsconf='dog ~/.aws/credentials'

# aws completion for bash
complete -C '/usr/local/bin/aws_completer' aws

# Set default AWS profile
awsprofile() {
  export AWS_DEFAULT_PROFILE=$1
}

# easily switches aws profiles on the fly
awsconfigure() {
  accounts=~/.aws/credentials
  #[[ ${accounts} ]] || accounts=~/.aws/credentials
  
  profiles=($(awk '/\[/{ gsub(/\[|\]/,"") ; print $NF }' $accounts))

  [[ -z "$1" ]] && printf \
      "%s\n" \
      "About: awsconfigure, version 1.0.0-2016 by Andrew Kuttor" \
      "Usage: awsconfigure [profile-name]" \
      "`echo -e "\n\e[4mAvailable Profiles\e[0m\n"`" \
      "${profiles[@]}" && 
      return

  [[ ( -v "$1" && "${profiles[@]}" =~ "$1" ) ]] && \
      export AWS_DEFAULT_PROFILE=$1;
      printf "%s\n" "`echo -e "\n\e[4mActivated Credential\e[0m"`";
      aws configure list | awk 'NR>2{print $1 ": " $2}';
} # end awsconfigure

# cf template validation
cfvalidate() {
  file_path=$1
  aws cloudformation validate-template \
      --template-body file://`pwd`/$file_path
}

# Lists all available profiles to switch to
function awsprofiles() {

    cred_file=${AWS_SHARED_CREDENTIALS_FILE};
    if [ -z $cred_file ]; then
        cred_file=~/.aws/credentials
    fi

    while read line; do
        if [[ $line == "["* ]]; then echo "$line"; fi;
    done < $cred_file;
}

# Switches AWS Profiles
awsswitch() {
   if [ -z $1 ]; then  echo "Usage: aws_switch profilename"; return; fi

   exists="$(aws configure get aws_access_key_id --profile $1)"
   if [[ -n $exists ]]; then
       export AWS_DEFAULT_PROFILE=$1;
       export AWS_PROFILE=$1;
       export AWS_REGION=$(aws configure get region --profile $1);
       echo "Switched to AWS Profile: $1";
       aws configure list
   fi
}

# Displays current AWS profile
awscurrent() {
  aws configure list
}

# AWS Completion
complete -C '/usr/local/bin/aws_completer' aws

# CF Template validation
aws_cf_validate() {
  file_path=$1
  aws cloudformation validate-template \
    --template-body file:///$file_path
}
